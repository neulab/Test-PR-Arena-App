name: PR-Arena with OpenHands

on:
  workflow_dispatch:
    inputs:
      issue_number:
        required: true
        type: number
      api_key:
        required: true
        type: string
      llm_models:
        required: true
        type: string
        default: ''
      firebase_secret:
        required: true
        type: string
      base_url:
        required: true
        type: string
      pat_token:
        required: true
        type: string
      pat_username:
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-fix:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Mask sensitive inputs and set as environment variables
      - name: Mask sensitive values
        run: |
          # First, mask the sensitive values
          echo "::add-mask::${{ inputs.api_key }}"
          echo "::add-mask::${{ inputs.pat_token }}"
          echo "::add-mask::${{ inputs.firebase_secret }}"
          echo "::add-mask::${{ inputs.base_url }}"
          echo "::add-mask::${{ inputs.llm_models }}"
          
          # Then, set them as environment variables
          echo "ISSUE_NUMBER=${{ inputs.issue_number }}" >> $GITHUB_ENV
          echo "API_KEY=${{ inputs.api_key }}" >> $GITHUB_ENV
          echo "PAT_TOKEN=${{ inputs.pat_token }}" >> $GITHUB_ENV
          echo "FIREBASE_SECRET=${{ inputs.firebase_secret }}" >> $GITHUB_ENV
          echo "BASE_URL=${{ inputs.base_url }}" >> $GITHUB_ENV
          echo "LLM_MODELS=${{ inputs.llm_models }}" >> $GITHUB_ENV
          echo "PAT_USERNAME=${{ inputs.pat_username }}" >> $GITHUB_ENV

      - name: Comment on issue with start message
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.PAT_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ env.ISSUE_NUMBER }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `OpenHands started fixing the issue! You can monitor the progress [here](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).`
            });

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install git+https://github.com/neulab/pr-arena.git@main
          pip install firebase-admin

      - name: Attempt to resolve issues and send the resolver output to Firebase
        run: |
          cd /tmp && python -m openhands_resolver.resolve_issues \
            --repo ${{ github.repository }} \
            --issue-numbers ${{ env.ISSUE_NUMBER }} \
            --token ${{ env.PAT_TOKEN }} \
            --key ${{ env.API_KEY }} \
            --base-url ${{ env.BASE_URL }} \
            --credential '${{ env.FIREBASE_SECRET }}'

      - name: Post webpage link to GitHub issue comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.PAT_TOKEN }}
          script: |
            const issueNumber = ${{ env.ISSUE_NUMBER }};
            const repo = context.repo.repo
            const owner = context.repo.owner
            const firebaseWebpageURL = `https://pr-arena.web.app/${owner}-${repo}-${issueNumber}`;

            github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: `⚔️PR-Arena is now open⚔️! You can view the proposed fixes and make a decision at [this link](${firebaseWebpageURL}).`
            });
      
      - name: Wait for user's decision and save it to the GitHub environment
        run: |
          cd /tmp && python -m openhands_resolver.listen_for_decision \
            --repo ${{ github.repository }} \
            --issue-number ${{ env.ISSUE_NUMBER }} \
            --token ${{ env.PAT_TOKEN }} \
            --username ${{ env.PAT_USERNAME }} \
            --credential '${{ env.FIREBASE_SECRET }}'

      - name: Create Pull Request for the selected branch
        run: |
          cd /tmp && python -m openhands_resolver.send_pull_request \
            --issue-number ${{ env.ISSUE_NUMBER }} \
            --model-number ${{ env.SELECTED }} \
            --pr-type draft \
            --token ${{ env.PAT_TOKEN }} | tee pr_result${{ env.SELECTED }}.txt && \
            grep "draft created" pr_result${{ env.SELECTED }}.txt | sed 's/.*\///g' > pr_number.txt

      - name: Comment on issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.PAT_TOKEN }}
          script: |
            const fs = require('fs');
            const issueNumber = ${{ env.ISSUE_NUMBER }};
            
            let prNumber = '';
            
            try {
              prNumber = fs.readFileSync('/tmp/pr_number.txt', 'utf8').trim();
            } catch (error) {
              console.error('Error reading PR number:', error);
            }
            
            github.rest.issues.createComment({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `A potential fix has been generated and a draft PR #${prNumber} has been created. Please review the changes.`
            });